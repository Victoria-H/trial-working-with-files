<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Joining Data</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <style>		
			@import URL(https://fonts.googleapis.com/css?family=Noto+Sans);
		</style>
        <link href="../../Resources/Stylesheets/vMain.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../Resources/Scripts/tincan-min.js">
        </script>
        <script src="../../Resources/Scripts/vicky.js">
        </script>
    </head>
    <body>
        <div class="vModuleNav" id="vNavContent">
        </div>
        <div class="vModuleNav" id="vPresNavContent" style="display:none">
        </div>
        <div id="vTopArea">
            <p id="vTitleNav">My Title</p>
            <img id="vLogo" src="../../Resources/Images/OtherGraphics/logo.png" alt="" />
        </div>
        <div id="vPrettyScroll">
        </div>
        <div class="closeAll">	
			OPEN ALL<img class="shotA" id="open" src="../../Resources/Images/OtherGraphics/shot_1x1.png" alt="" style="width: 1;height: 1;" />
			CLOSE ALL<img class="shotCloseA" id="close" src="../../Resources/Images/OtherGraphics/shotclose_1x1.png" alt="" style="width: 1;height: 1;" /></div>
        <div class="content mySideNavContent">
            <div id="contentBody">
                <div class="row collapse">
                    <div class="sideContent">
                    </div>
                    <h1>Jointure sur deux sources de données</h1>
                    <h2>Vue d'ensemble<![CDATA[        ]]></h2>
                    <p>Cette leçon vous permet d'effectuer des jointures sur des données de différentes sources. La plupart des entreprises ont des données stockées à différents endroits et ont besoin de combiner ces données, soit pour les stocker sous un format unifié, soit pour les traiter de manière cohérente. L'exemple que vous allez construire dans cette leçon se base sur celui de l'exercice précédent, qui mettait en majuscules les abréviations des États des États-Unis et ajoutait un fichier contenant une liste des codes et noms des États des États-Unis en tant que table de référence (lookup), afin que la sortie contienne l'abréviation et le nom complet de l'État.</p>
                    <p>Une colonne commune (<span class="ui-control">State Code</span>) est utilisée pour effectuer une jointure entre les deux sources de données. <br /><img src="../../Resources/Images/image7.png" alt="" /><br /></p>
                    <h2>Objectifs
        </h2>
                    <p>Après avoir terminé cette leçon, vous pourrez&#160;:</p>
                    <ul>
                        <li value="1">
                            <p>Stocker centralement des métadonnées pour les utiliser dans d'autres composants et Jobs</p>
                        </li>
                        <li value="2">
                            <p>Utiliser des métadonnées </p>
                        </li>
                        <li value="3">
                            <p>Effectuer une jointure sur deux sources de données</p>
                        </li>
                        <li value="4">
                            <p>Déboguer une jointure en examinant les rejets</p>
                        </li>
                        <li value="5">
                            <p>Afficher dans la console les lignes de données rejetées</p>
                        </li>
                    </ul>
                    <p>
                        <h2>Avant de commencer</h2>
                    </p>
                    <p>Assurez-vous de travailler dans un environnement contenant les fichiers <span class="ui-control">Custs.csv</span> et
        <span class="ui-control">States.txt</span> nécessaires à cet exercice dans  <span class="ui-control">C:/StudentFiles</span>.</p>
                    <h2>Étape suivante</h2>
                    <p>La première étape consiste à <a href="CreatingRepositoryItem.htm">créer des métadonnées</a> pour le fichier <span class="ui-control">States</span>. </p>
                    <!-- Tin Can API Wrapper -->
                    <script>/* <![CDATA[ */
// Uncomment the following line to enable debug statements in the web console of the browser
//TinCan.enableDebug();

// Initialize a TinCan object.
// Several properties forwarded through the Activity Provider (AP) are automatically set, like the endpoint and authentication:
// Refer to http://scorm.com/wp-content/assets/tincandocs/Incorporating-a-Tin-Can-LRS-into-an-LMS.pdf for more details
var tincan = new TinCan (
	{
		url: window.location.href,
	}
);

// Send activity initialization statement
// 'duration' is set to 0 seconds (pattern is "PT1H37M56.34S" = 1 hour, 37 min and 56.34 seconds)
tincan.sendStatement(
	{
		verb: {
			id: "http://adlnet.gov/expapi/verbs/attempted",
			display: {
				"en-US": "attempted"
			}
		},
		result: {
			duration: "PT0S"
		}
	}
);

// Marshall TinCan object to Local Storage for later reuse in other pages
localStorage.setItem("tincan", JSON.stringify(tincan));
		/* ]]> */</script>
                    <!-- /Tin Can API Wrapper -->
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <h6>Copyright © <span class="GeneralYear">2016</span> Talend Inc.</h6>
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                </div>
            </div>
        </div>
        <script>/* <![CDATA[ */
	
		
			document.onload=vPoshSideNav();
			document.onload=vOpenClose();
			document.onload=vQuiz();
			
		/* ]]> */</script>
    </body>
</html>